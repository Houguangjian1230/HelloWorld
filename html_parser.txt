# _*_coding:utf-8 _*_
import urlparse

from bs4 import BeautifulSoup
import re
class HtmlParser(object):
    def _get_new_urls(self,page_url,soup):
        new_urls = set()  #将结果存放在一个列表里

        # 要匹配的url格式为 /item  ,改格式是不完整的url

        links = soup.find_all('a', href=re.compile(r"/item/(.*)"))  #引入正则表达式来匹配url
        for link in links:
            new_url = link['href']    #获得url链接
            new_full_url = urlparse.urljoin(page_url,new_url)   #拼接成完整的url，用的是urljoin（）方法
            new_urls.add(new_full_url)
        return new_urls


    def _get_new_data(self,page_url,soup):
        res_data = {}
        #url
        res_data['url']=page_url   #把url也放进最终的数据中

        #<dd class="lemmaWgt-lemmaTitle-title"><h1>Python</h1>
        title_node =  soup.find('dd',class_="lemmaWgt-lemmaTitle-title").find('h1')
        res_data['title'] = title_node.get_text()

        #<div class="lemma-summary" label-module="lemmaSummary">
        summary_node = soup.find('div',class_="lemma-summary")
        res_data['summary'] = summary_node.get_text()
        return res_data

    def parse(self,page_url,html_cont):
        if page_url is None or html_cont is None:
            return None

        soup = BeautifulSoup(html_cont,'html.parser',from_encoding='utf-8')
        new_urls = self._get_new_urls(page_url,soup)
        new_data = self._get_new_data(page_url,soup)
        return new_urls,new_data
'''
解析器工作原理：
传入一个url和下载好的页面的数据，解析出新的url和新的数据并且返回
在获取url的方法中匹配出了所有词条的url
在获取数据中，解析出了title和sumary两个数据 
'''